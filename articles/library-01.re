= 外部ライブラリ 1日目

本章では、Androidアプリケーション開発における外部ライブラリの役割とその使い方、作り方、配布方法を学びます。

==  ライブラリとは何か

ライブラリとは特定の処理を行うプログラムをひとまとめにし、他のプログラムから利用できる形式にしたものの事です。ライブラリを利用する事でアプリケーションは様々な機能を簡単に実装する事が出来るようになります。Androidアプリケーションを開発する際、JavaのAPIやAndroidフレームワークのAPIを利用しますがこれらもライブラリです。ライブラリはアプリケーション開発において無くてはならない存在なのです。

//image[library-figure][アプリケーションとライブラリの関係イメージ図]{
//}


== 静的リンクと動的リンク

ライブラリはソースコード、オブジェクトコード、専用のフォーマットなど様々な形式で提供されており、利用するプログラムはそれらの形式に合わせてライブラリと結びつく必要があります。ライブラリと結びつく方式は大きく分けると静的リンクと動的リンクに分類できます。

=== 静的リンク

静的リンクはアプリケーションとライブラリをコンパイルのリンク時に結びつけ、実行ファイルに含める方式です。静的リンクの場合リンク時にライブラリのAPIやバージョン等の整合性をチェックする事になるので、コンパイルの時点で問題があれば検出できます。ただし、実行ファイルにライブラリファイルを含めるので実行ファイルのサイズは大きくなってしまいます。また、ライブラリをアップデートするには再度アプリケーションをコンパイルし直す必要があります。Androidにおいてはライブラリプロジェクトやaar、exportedなjarが静的リンクになります。

=== 動的リンク

動的リンクはアプリケーションを実行する時にライブラリとリンクする方式です@<fn>{dll}。実行ファイルとは独立したファイルなので、実行ファイルのサイズを圧迫する事がありません。また複数のアプリケーションから同時に利用したり、ファイルを差し替えれば再コンパイルする事なくアップデートしたりできます。しかしライブラリが互換性のないアップデートをしてしまった場合は動作時にエラーとなってしまいます。その為動的リンク形式のライブラリを利用する場合はバージョン管理が重要になります。AndroidではAndroidフレームワークが動的リンク形式のライブラリとなります。

//footnote[dll][Windowsを利用している方は「.dll(Dynamic Link Library)」という拡張子のファイルを見たことがあると思います。これが動的リンクができるライブラリです。]

== なぜライブラリが必要なのか



=== 巨人の肩に乗る
  
* libjpegの話


== Androidアプリケーションおけるライブラリ

Androidアプリケーションで利用できるライブラリにはjar(Java Archive)、ライブラリプロジェクト、aar(Android Archive)があります。これらはJavaから参照できるライブラリです。この他NDKを用いてC言語でプログラムを記述する場合にはso(Shared Object)というライブラリ形式を利用できます。

#@# 参考
#@# jar:http://www.cse.yorku.ca/tech/other/jdk1.2.1/docs/guide/jar/
#@# manifest format:http://www.cse.yorku.ca/tech/other/jdk1.2.1/docs/guide/jar/manifest.html


=== jar(Java Archive)

Androidアプリケーションは基本的にJavaでソースコードを記述します。その為既存のJavaライブラリの多くを利用できます。Javaライブラリの形式はjar(Java Archive)と呼ばれ、classファイル群と署名やバージョン等のメタ情報が書かれたファイルがアーカイブされています。

NDKを用いる事でC言語を使ってプログラムを記述する事もできます。その為

=== ライブラリプロジェクト

=== aar(Android Archive)

=== so(Shared Object)


 * Androidフレームワークも一種のライブラリだ
 * バージョン問題とsupportライブラリ
 * 今までも色んなライブラリの恩恵を受けている
 ** 例えばOpenGLとか,Javaの標準クラスライブラリとか
 * ライブラリを使ってコードを書かずに処理をさせてみよう
 ** 通信系？
 ** 画像処理系?
 ** UI系
 * 様々なライブラリ


演習メモ

=== 演習1 

 ネットワーク章で作ったHttpURLConnectionの処理を@<href>{https://github.com/loopj/android-async-http,android-async-http}に置き換えてみよう

=== 演習2

 @<href>{https://github.com/Bearded-Hen/Android-Bootstrap,Android-Bootstrap}でUIを格好良くしてみよう