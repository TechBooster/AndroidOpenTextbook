= ユーザーインターフェイス基礎

実際にアプリを作っていく上で必要な画面のレイアウトやデザイン。これらを、「ユーザーが操作していくもの」という意味も含めて、ユーザーインターフェイスと呼びます。
たとえば、テキストを入力するものや、押すと何かが起こるボタンなどです。また、操作するわけではないですが、アプリの重要な要素として、テキストや画像などもそのうちのひとつです。

Androidアプリのユーザーインターフェイスは、プロジェクトの「res」フォルダ内のXMLファイルに記述していきます。

慣れてきたら自分でXMLを作成していくのですが、Androidにどんなパーツがあるのかがまだわからないうちは、いきなりXMLを書いていくのは少しむずかしいでしょう。
最初は、ドラッグアンドドロップで簡単にインターフェイスを作ることができる「Graphical Layout」を使って、Androidにはどのようなパーツがあるのかを見ていきます。
その後で、XMLを使ったレイアウトの作成方法をみていきましょう。


== Graphical Layoutを使ってレイアウトを作ってみよう

この節では、ADTについている「Graphical Layout」を使ってレイアウトを完成させます。
細かいことは気にせず、Androidにはどのようなパーツがあり、どんなときに使うのかをざっと把握することが目的です。

=== 新規プロジェクトを作成し、「Graphical Layout」を表示する

ADTを立ち上げ、新たにAndroidプロジェクトを作成します。
そうすると、「MainActivity.java」「fragment_main.xml」のふたつのファイルが開かれた状態になります。

上のタブで「fragment_main.xml」を選び、下のタブが「Graphical Layout」になっていることを確認します。


【001】（「fragment_main.xml」と「Graphical Layout」に矢印を入れたい）

=== Graphical Layout の見方を確認しよう

Graphical Layout を開くと、Androidの画面が大きくあらわれます。初期状態では、「Hello world!」というテキストがひとつ書かれているのがわかります。
他にもいくつかのパネルがあります。

＜001にA〜Gとそのタイトルを入れる＞

(A)パレット：各パーツが入っている
(B)プレビュー：現在設定されているものがプレビューされます
(C)プレビューに関する端末の設定：プレビューを表示する端末の種類やバージョンを設定します
(D)パーツのレイアウトに関する設定：パーツのレイアウト設定をします
(E)プレビューに関するビューの設定：プレビューを表示する大きさを設定します
(F)アウトライン：配置したパーツがどういう階層構造になっているのかを設定します
(G)プロパティ：配置したパーツの詳細設定をしていきます

最初からすべてを把握するのは大変です。必要なものはそのときどきで説明していきますので、まずはパーツを配置してみることからはじめていきましょう。



=== パーツを配置してみよう

(A)のパレットから好きなパーツを選んで、(B)のプレビュー領域にドラッグアンドドロップをしてみましょう。

　　 
【002（ドラッグ中） - 003（ドラッグ完了）】
▲(A)パレットの「Form Widgets」の中から「Button」を選んでドラッグアンドドロップし、Buttonを配置した

ボタンが配置されました。

=== プロパティパネルを使ってカスタマイズする

先ほど配置したボタンは、「Button」と書かれています。
このままではいったい何のボタンかわかりませんので、文字を変更します。

プレビュー画面のボタンを選択した状態で、プロパティパネルを見ると、ボタンのプロパティがたくさん出ています。


【004】
▲ボタンのプロパティ

この中にある「Text」という項目が、ボタンのラベルになっていますので、右の列の「Button」と書かれてあるところをダブルクリックし、「送信」に変えてみましょう。
（Textは2ヶ所ありますが、どちらも同じです）

【005】
▲ボタンのラベルを「送信」に変えた

そうすると、プレビューエリアのボタンのラベルも変わりました。


【006】
▲プレビューエリアのボタンのラベルも「送信」に変わった

このように、プロパティパネルにある値をいろいろと変えていくことで、パーツのカスタマイズができます。

=== Graphical Layoutのパーツ一覧

パーツは、パレットエリアに、カテゴリごとにフォルダ分けされています。他のフォルダの中も見てみましょう。


【007 - 015】

パレットの中に入っているパーツは、配置するだけで、アプリ内でそのまま使えるものもあります。たとえば、テキストや画像などは何かを表示するだけのものですので、配置するだけでその役目を果たします。
しかし多くの場合はそうではなく、たとえば、テキストを入力してボタンを押したらどうなるか、というところをプログラミングしなければ、アプリとして成立しません。
それらは、配置するだけなら「レイアウトデザイン」として見せかけだけの画面はできあがりますが、アプリとして何か使えるようになるわけではないのです。

また、プログラミングによって関連付けをしなければ、たとえレイアウトデザインとしてであっても使えないパーツもたくさんあります。
「Composite」フォルダの中などはそういったものばかりです。

ここでは、ボタンを押しても何も起こらないような、見せかけだけのレイアウトを作っていくことを頭に置いておきましょう。

=== 実習1：Graphical Layoutを使って、次のインターフェイスを作成してみよう


【016】

==== 解説

基本的には、あてはまるパーツをパレットからドラッグアンドドロップして配置することで、完成します。
ただし、いくつかの注意点があります。

===== 1. Text Fieldsの種類

このサンプルには、

 * お名前
 * Email
 * お電話番号
 * パスワード

の4つのテキストフィールドがあり、それぞれ「Text Fields」フォルダの中から選んで配置しますが、それぞれの「Input Type」が異なるものを選んでくるのが最適です。


【017】
▲E-mailでは、Input Typeの値が「textEmailAddress」になっている


【018 - 021】
▲それぞれの特徴にあったText Fieldsを選ぶ

こうすることで、Android OSが最適なIME（日本語入力）キーボードを自動で表示することができます。
たとえば、「Plain Text」のときは通常の日本語入力キーボードですが、「E-mail」にしたときは英数字キーボードで、しかも「@」も表示されているのがわかります。
また、電話番号は「Phone」にすれば数字キーボードになります。パスワードも、「Password」にすると、入力済みの文字が「●」で表示され、見えなくなるようになっています。

すべて同じ「Plain Text」にしても間違いではないのですが、もし自分が入力する立場になったときのことを考えると、メールアドレスを入力したいときに、日本語キーボードが表示されていたら、英数字キーボードに切り替えるのは手間ですよね。
Input Typeで表示させるキーボードを切り分けることによって、@<b>[よりユーザーが使いやすいインターフェイスを表現できる]のです。

===== 2. ラジオグループ

ラジオボタンは、ひとまとまりのグループにおいて、ひとつの項目しか選択できない状態でなければなりません。

そうするためには、「Form Widgets」の中の「RadioGroup」を選ぶべきです。「RadioButton」を選んでしまうと、それぞれが単独で選べることになってしまいますので、注意しましょう。

【022】
▲ラジオボタンをそれぞれ単独で選ぶことができる状態。こうならないようにしよう

===== 3. 「登録する」というボタン

普通にボタンを置いた状態では、ボタンの横幅が文字数に応じたものになってしまいます。



【023】
▲ボタンの横幅が、「登録する」の4文字分しかない

これでは、小さくて押しづらくなってしまいます。
このボタンは、すべての項目を入力したあとの「入力完了」という意味も含めて押すものですので、横幅いっぱいに大きく配置しましょう。

まずはボタンを配置し、「登録する」というラベルに変更したあとに、マウスをうまく使って横幅いっぱいに伸ばします。


【024】
▲ボタンの横幅を調整する

ここまで完成したら、次の節ではXMLでインターフェイスを作っていきます。


== XMLを使ってパーツを作れるようになる

Graphical Layoutではドラッグアンドドロップでだれでもレイアウトを作ることができます。しかし、細かいレイアウトの設定は、XMLでしていかなければなりません。

この節では、XMLを使ってよく使うパーツを作れるようになりましょう。

=== XMLレイアウトがどんなものかを知る

まず、XMLレイアウトがどんなものかを知るために、あらかじめ配置されているXMLをカスタマイズしていきます。

新規Androidプロジェクトを作成します。
そして、立ち上がった「fragment_main.xml」を開きます。Graphical Layoutを見ると、「Hello world!」が表示されています。


//image[201]{
//}

下のタブを「fragment_main.xml」に切り替えてみましょう。

ここに書かれているのが、XMLレイアウトです。


//image[202][XMLレイアウトが書かれている]{
//}

テキストが表示されている部分のXMLは、次のようになっています。

//list[201][テキストが表示されている部分のXML]{
<TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/hello_world" />
//}

==== テキストの文字列を変更する

4行目の「android:text=””」の中で、表示する文字列を指定しています。ここでは、@stringといって他のファイルを参照するように指定されていますが、いったん無視して、好きなテキストに変えてみます。

//list[202][4行目を追加した]{
<TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="XMLレイアウトの基礎" />
//}

確認方法は、AVDでも実機でもどちらでもかまいません。簡易的な確認であれば、Graphical Layoutでもできます。

//image[203][出力結果。Graphical Layoutで確認した場合]{
//}

先ほど「Hello world!」だったテキストが、入力したものに変わっていることが確認できます。

==== テキストの色や大きさを変更する

では次に、テキストの色や大きさを変更してみましょう。
先ほどの@<list>[202]に、次の2行を追加します。

//list[203][5〜6行目を追加した]{
<TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="XMLレイアウトの基礎"
        android:textColor="#ff0000"
        android:textSize="22sp" />
//}

「android:textColor」がテキストの色を指定する属性で、「#ff0000（赤色）」を指定しました。
「android:textSize」はテキストの大きさを指定する属性で、「22sp」を指定しました。
これらを追加することによって、どのような表示になるかはだいたい想像がつきますよね。


//image[204][出力結果。テキストが赤色になり、大きくなった]{
//}

テキストが赤色になり、大きさが大きくなったのが確認できます。

このように、さまざまな属性を指定していくことで、Androidのレイアウトを作成していくのです。

=== XMLの書き方

XMLは、次のような要素で構成されています。


//image[205][テキストを表示させるXML]{
//}

 * 要素名：何を表示させるか
 * 属性：要素に対する詳細な設定。ほとんどの場合、先頭に「android:」の接頭辞が付く
 * 値：属性の設定値

==== 要素名

要素名は、よく使うものとして次のようなものがあります。

//table[よく使う要素名]{
Button  ボタンを表示する
TextView        テキストを表示する
ImageView       画像を表示する
EditText        テキストフィールド（文字入力エリア）を表示する
CheckBox        チェックボックスを表示する
RadioButton     ラジオボタンを表示する
ProgressBar     プログレスバーを表示する
SeekBar シークバーを表示する
//}

==== 属性

属性は、各要素によって設定できるものが決まっています。
たとえば、テキストを表示するTextViewであれば、色（textColor）や大きさ（textSize）の設定ができますが、画像を表示するImageViewだと、それらの設定はありません。

各要素に設定できる属性は、それぞれにおいてかなりの数があります。
どのような属性が指定できるかは、コードを書いている中で「android:」と打っていくと、指定可能な候補一覧が表示されますので、それを見ておくとよいでしょう。


//image[206][TextViewで指定可能な属性の候補が表示される]{
//}

==== 値

値は、各属性によって設定できるものが決まっています。
これも、設定できるものが選べる場合は、属性と同じように候補一覧が表示されますので、見ておくとよいでしょう。


//image[207][TextViewのtextStyleという属性で指定可能な値の候補が表示される]{
//}

=== 主要なパーツを作ってみる

それでは、よく使うパーツを詳しく説明していきます。
これらのパーツは、何も見なくてもXMLで作成できるようにしておくことが望ましいです。

 * ボタン
 * テキスト
 * 画像
 * テキストフィールド

==== ボタン


==== テキスト


==== 画像



==== テキストフィールド


=== valuesフォルダを活用しよう

==== valuesフォルダとは？
==== string
==== dimen
==== color
==== style