= Webサーバを作る

前2章でWebサーバを理解する上で必要な技術、仕様等を説明しました。

本章ではどのようにWebサーバが作られるかについて、作る側の視点から説明していきます。

== Webサーバの基本はHTTPのレスポンスを返すこと。そしてデータを長時間保存して共有すること

Android端末からはHTTPリクエストを送りますが、サーバから見るとリクエストは「来る」ものです。
リクエストを読み取り、レスポンスを返すことがサーバアプリケーションの基本的な役割です。

レスポンスのためのデータも保存します。
クライアントとしてのAndroid端末と異なり、
一つのサーバに複数のクライアントがアクセスし、
天気予報のような共有できるデータは共有します。
Web上の掲示板やTwitterのようなソーシャルサイトでもやはり共有します。

「どのように」保存するかはサーバの用途に応じて選択されます。

例えば"Hello World"とだけテキスト形式でHTTPレスポンスを
返すWebサーバがあったとすると、サーバプログラムに
Hello Worldという文字を埋め込むだけで済みます。
サーバプログラムの外部に何かを「覚えて」おく仕組みを
用意する必要はありません。


いわゆる「データベース」のような、
データの保存に特化した仕組みを使って保存しておきます。


== 自分でナマのレスポンスを記述することはめったにない。

しかしHTTPはすでに大変複雑な技術と化しており、
更にサーバへアクセスしてくるWebブラウザ側の挙動に問題があったりするため
自力で全てを実装するのは難しくなっています。
特に高度なことを達成しようとすればするほど、
ミスが発生します。

また、特にセキュリティについて言えば、
いくつかの典型的な問題向けには取るべき定番の対策があります。
それを実現するための仕組みを、プログラミング言語や
Webサーバを作るためのフレームワークが提供しています。
例えばCSRF脆弱性の多くはPOST送信を行うフォーム等に
nonceを埋め込めば防げるため、Webフレームワークでは
nonceを自動生成して埋め込む仕組み、
それがないPOSTリクエストを遮断する仕組みがあったりします。
@<fn>{csrf_token}
@<fn>{not_all}

//footnote[csrf_token][PythonのWebフレームワークであるDjangoにはそのものずばり、csrf_tokenという仕組みがあり、POSTリクエストはこれが含まれていない場合、標準で一律に遮断されます。]

//footnote[not_all][では全ての脆弱性をフレームワークなどで防げるかと言いますと、答えは「いいえ」です]

== IaaS: Webサーバ開発者のつよーい味方

昔は実際のコンピュータを自宅に並べる、なんていうことも行われていましたが、現在ではあまり行われなくなりました。


== 演習: 作ってみる

== まとめ

Webサーバについて、基本からサーバの作成例について説明しました。

== さらなる学習のために

Webサーバの周辺技術は多岐に渡ります。

本章ではAndroidから見たWebサーバを理解することが目的でした。
そのようなわけで、HTTPやURI、HTMLという「相互のやりとりのためのプロトコル」
を中心に解説してきました。

参考書籍でも、Webサーバを作る側の技術解説ではなく、
相互運用について勉強になる資料を中心に紹介します。

 * 『HTTPの教科書』翔泳社
 * 『Webを支える技術』技術評論社
 * 『めんどうくさいWebセキュリティ』
  * 基本的な解説を読んで「簡単そう」と思ったら読んでみましょう。いわゆるコーナーケースの瑣末さとセキュリティの関係を理解するに連れて吐き気がしてきます。
 * 『コンピュータネットワーク 第5版』
  * タネンバウム博士によるネットワークの教科書です。第7章 アプリケーション層の説明の一つとしてWorld Wide Webの説明と、第8章のネットワーク・セキュリティが読者の興味を引くかも知れません。どちらかというと「ネットワーク」の章の参考書籍と言えるかもしれません :-P
 * http://www.html5rocks.com/ja/tutorials/internals/howbrowserswork/
  * ブラウザ側。
 * 『過負荷に耐えるWebの作り方』
  * 第一回AKB総選挙のWebサーバがどう作られたかが書かれた本です。高負荷なWebサーバの構成やテスト方法等が書かれており、端末側から見えない部分の概要を知りたい方には中々良い本です。
@<fn>{akb_math}

本章執筆時点（2014年6月）でややこしいのは、すでに本章で紹介したHTTP 1.1の仕様改定があったことです。
HTTP 1.1という表現で差すものが実は変わっています。

それ以前に出版されたHTTP 1.1に関わる書籍は、
しばしば「既存のHTTP 1.1の問題」という形でRFC 2616に関わるHTTP 1.1の落とし穴や問題点を指摘しています。
しかし、新仕様自体でバグ修正されていたりして消滅しているため、
そういった問題点の多くは教養としても理解する意味が薄くなっているように感じられます。
@<fn>{http_20_will_solve}

//footnote[http_20_will_solve][来るHTTP 2.0（本稿執筆時点でも出ていません）が解決してくれるに違いない、という文面も見ました。1.1自身が変わるという可能性には気が付かなかった模様です。実際、バージョン番号まで決まって10年以上安定している仕様自体がまるっと修正されるとは思いませんよね]

新RFC公開前の書籍を読む際には、新RFCの該当する記述と対比しながら読む方が良い勉強になるかもしれません。
@<fn>{learning_rfc}

//footnote[learning_rfc][本章筆者は新RFCの記述方法の的確さに感動してしまい、本来本章で記述するべきAndroidに関わる内容よりも圧倒的に多くの時間を単なるHTTP 1.1の仕様理解とRFC読みに費やしてしまいました。「いいじゃんAndroidアプリでそこが問題になることはほとんどないよ」という事実には意識が向きませんでした。]
//footnote[akb_math][個人的に超知りたいのは、投票権で使われたというシリアル番号生成アルゴリズムですが、そこは書いてないんですよね]

